name: Main deployment of pdf generator lambda function

on:
  push:
    branches: [main]

jobs:
  staging_job:
    name: Staging deployment of pdf generator lambda function
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.LAMBDA_CONTAINER_PIPELINE_AWS_ID }}
          aws-secret-access-key: ${{ secrets.LAMBDA_CONTAINER_PIPELINE_AWS_SECRET }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-pf-aws-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push the tagged docker image to Amazon ECR
        id: build-custom-image
        env:
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: lambda-feedback-staging-pdf-generator
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update aws custom lambda function code
        env:
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: lambda-feedback-staging-pdf-generator
          IMAGE_TAG: latest
        run: |
          aws lambda update-function-code \
              --function-name lambda-feedback-staging-pdf-generator \
              --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  approval_job:
    needs: staging_job
    name: Waiting for approval
    runs-on: ubuntu-latest
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_SECRET }}
      - name: Approve Production Deployment
        uses: trstringer/manual-approval@v1.7.0
        with:
          approvers: approvers
          minimum-approvals: 1
          secret: ${{ steps.generate_token.outputs.token }}
          issue-title: Approve Production Deployment
          issue-body: "Approve production deployment for the PDF generator"
          exclude-workflow-initiator-as-approver: false
          additional-approved-words: ok, fine
          additional-denied-words: ""

  prod_job:
    needs: approval_job
    name: Prod deployment of pdf generator lambda function
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.LAMBDA_CONTAINER_PIPELINE_AWS_ID }}
          aws-secret-access-key: ${{ secrets.LAMBDA_CONTAINER_PIPELINE_AWS_SECRET }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-pf-aws-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and push the tagged docker image to Amazon ECR
        id: build-custom-image
        env:
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: lambda-feedback-prod-pdf-generator
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update aws custom lambda function code
        env:
          ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
          ECR_REPOSITORY: lambda-feedback-prod-pdf-generator
          IMAGE_TAG: latest
        run: |
          aws lambda update-function-code \
              --function-name lambda-feedback-prod-pdf-generator \
              --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
